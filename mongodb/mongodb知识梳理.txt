mongoDB
1>安装数据，百度下，一堆安装包。
2>安装完后在随意目录下建个db文件夹，用来存放mongodb的数据，当然我习惯是在安装mongoDB下建。
3>进到mongoDB/bin目录下使用 mongod --dbpath=C:\mongoDB\db
4>启动后，别关闭这个命令栏，然后你可以登陆:http://localhost:27017/ ，中学生英文，大家都看得懂，有启动服务就行。

使用：
insert操作：
db.test.insert({"name":"snoob"})  //会自动创建test数据库，然后插入数据。要查看所有数据库：show dbs
find操作：
db.test.find() //你会看到有相关数据的，其中第一栏"_db":ObjectIdXX;这个字段是数据库默认给我们加的GUID，目的就是保证数据的唯一性。也不要怕写错。错误提示很强大的。
当然，你也可以利用db.test.find({"name":"snoob"})，这种方式也是行的。
update操作：
db.test.update({"name":"snoob"},{"name":"snoobcn"}) //2个参数，update方法的第一个参数为“查找的条件”，第二个参数为“更新的值”。
remove操作
db.test.remove() //不带参数将删除所有数据，炒鸡危险的操作，在mongodb中是一个不可撤回的操作，三思而后行

文档是采用“K-V”格式存储的，如果大家对JSON比较熟悉的话，我相信学mongodb是手到擒来，我们知道JSON里面Value
可能是“字符串”，可能是“数组”，又有可能是内嵌的一个JSON对象，相同的方式也适合于BSON（Binary JSON）
我们也可以这样写：
var userInf={"name":"snoob","age":20,"fav":["football","basketball"]}
db.test.insert(userInf)
//这样就会看到上面那条数据也插入了。
userInf.name="snoobcn"
db.test.insert(userInf)
//这样就会有2条数据，并且就只有名字不一样，不信你find()看看。批量写入的话，只要用个for循环或者while循环，反正你只要控制好就行。

查询用到的:
 ①： >, >=, <, <=, !=, =。  -->"$gt", "$gte", "$lt", "$lte", "$ne", "没有特殊关键字"
 ②：And，OR，In，NotIn  -->"无关键字“, "$or", "$in"，"$nin" 
//样例，如数据库中有个年龄30，年龄20，年龄40，我要查小于35的
db.test.find({"age":{$lt:35}})

正则查询：简直无耻
db.test.find({"name":/^s/})

查询很复杂，用$where
db.test.find({$where:function(){return this.name=='snoob'}})

//假设数据{"name":"snoob","age":30}
db.test.update({"name":"snoob"},{"age":60})==>数据就变成了{"age":60}
db.test.update({"name":"snoob"},{$inc{"age":60}})==>数据就变成了{"name":"snoob","age":90}  //inc = increase自增
db.test.update({"name":"snoob"},{$set{"age":60}})==>数据就变成了{"name":"snoob","age":60}

upsert操作 = update+insert   //  如果我没有查到，我就在数据库里面新增一条

count操作:
db.test.count({"age":40})  //返回age=40的条数
distinct操作：//假设数据有{"age":40} {"age":30} {"age":20} {"age":40}
db.test.distinct("age")  //去重返回值 [20,30,40]

group、mapReduce操作，蛮复杂，说不清楚啊附上地址：http://www.cnblogs.com/huangxincheng/archive/2012/02/21/2361205.html

设置游标
var list=db.test.find(); 
list.forEach(function(x){print(x.age)});

sort排序1增序 -1降序：
db.test.find().sort({"age":1})
limit()返回最大数量
db.test.find().limit(2) //返回2条结果
skip()跳过
db.test.find().skip(2) //跳过2条结果
组合大技：db.test.find().sort({"age":1}).skip(2).limit(3) //按年龄正序的结果跳过2条后显示3条

